input {
file {
     path => "${INPUTS}"
     path => "${INPUTS}/**/*"
     path => "${INPUTS}/**/**/*"
     exclude => "*.gz" 
     exclude => "*.zip"
     exclude => "*.py"
     exclude => "*.sh"
     start_position => "beginning"
#     ignore_older => 0
     type => "javaStackTrace"
     sincedb_path => "${SINCEDB}"
     sincedb_write_interval => 0
     codec => multiline {
        pattern => "^\["
	patterns_dir => "/etc/logstash/patterns/"
        negate => true
        what => previous
	auto_flush_interval => 0
      }
    }
}
filter {
  if [type] == "javaStackTrace" {
  grok {
    patterns_dir => ["/etc/logstash/patterns"]
match => { "message" => "\[%{MYTIME:errortime}] %{LOGLEVEL:level} %{DATA:errordata}\n%{JAVACLASS:exceptionclass}:%{DATA:exceptiondata}\n%{CAUSED:Causedby}: %{JAVACLASS:causedbyclass}:%{DATA:causedbydata}$" }
    remove_tag => [ "_grokparsefailure" ]
    add_tag => ["complete"]
	}
if "_grokparsefailure" in [tags] {
  grok {
    patterns_dir => ["/etc/logstash/patterns"]
    match => { "message" => "\[%{MYTIME:errortime}] %{LOGLEVEL:level} %{DATA:errordata}\n%{JAVACLASS:exceptionclass}:%{DATA:exceptiondata}$" }
    add_field => { "subType" => "errorexception" }
    remove_tag => ["_grokparsefailure"]
    add_tag => [ "errorexception" ]
        }
if "_grokparsefailure" in [tags] {
  grok {
    patterns_dir => ["/etc/logstash/patterns"]
    match => { "message" => "\[%{MYTIME:errortime}] %{LOGLEVEL:level} %{DATA:errordata}\n%{JAVACLASS:exceptionclass}: %{DATA:exceptiondata}\n%{CAUSED:Causedby}: %{JAVACLASS:causedbyclass}:%{DATA:causedbydata}\n%{CAUSED:Causedby1}: %{JAVACLASS:causedbyclass1}:%{DATA:causedbydata1}$" }
    add_field => { "subType" => "errorexception" }
    remove_tag => ["_grokparsefailure"]
    add_tag => [ "errorexception" ]
        }
if "_grokparsefailure" in [tags] {
  grok {
    patterns_dir => ["/etc/logstash/patterns"]
    match => { "message" => "\[%{MYTIME:errortime}] %{LOGLEVEL:level} %{DATA:errordata}\n%{CAUSED:Causedby}: %{JAVACLASS:causedbyclass}:%{DATA:causedbydata}$" }
    add_field => { "subType" => "errorexception" }
    remove_tag => ["_grokparsefailure"]
    add_tag => [ "errorexception" ]
        }
if "_grokparsefailure" in [tags] {
  grok {
    patterns_dir => ["/etc/logstash/patterns"]
    match => { "message" => "\[%{MYTIME:errortime}] %{LOGLEVEL:level} %{DATA:errordata}\n%{CAUSED:Causedby}: %{JAVACLASS:causedbyclass}:%{DATA:causedbydata}\n%{CAUSED:Causedby1}: %{JAVACLASS:causedbyclass1}:%{DATA:causedbydata1}$" }
    add_field => { "subType" => "errorexception" }
    remove_tag => ["_grokparsefailure"]
    add_tag => [ "errorexception" ]
        }
if "_grokparsefailure" in [tags] {
  grok {
    patterns_dir => ["/etc/logstash/patterns"]
    match => { "message" => "\[%{MYTIME:errortime}] %{LOGLEVEL:level} %{DATA:errordata}\n%{JAVACLASS:exceptionclass}\n%{CAUSED:Causedby}: %{JAVACLASS:causedbyclass}" }
    add_field => { "subType" => "errorexception" }
    remove_tag => ["_grokparsefailure"]
    add_tag => [ "errorexception" ]
        }
if "_grokparsefailure" in [tags] {
  grok {
    patterns_dir => ["/etc/logstash/patterns"]
    match => { "message" => "\[%{MYTIME:errortime}] %{LOGLEVEL:level} %{DATA:errordata}\n%{JAVACLASS:exceptionclass}" }
    add_field => { "subType" => "errorexception" }
    remove_tag => ["_grokparsefailure"]
    add_tag => [ "errorexception" ]
        }
  if "_grokparsefailure" in [tags] {
  grok {
    patterns_dir => ["/etc/logstash/patterns"]
    match => { "message" => "\[%{MYTIME:errortime}] %{LOGLEVEL:level} %{DATA:errordata}$" }
    add_field => { "subType" => "parentclass" }
    remove_tag => ["_grokparsefailure"]
    add_tag => [ "error" ]
      	}
        }
       }
      }
     }
    }
   } 
  }
}

  mutate {
    remove_field => [ "message","@version","host", "@timestamp" ]
	}
}
output {
        if "_grokparsefailure" in [tags] {
        csv {
#	   fields =>  [ "path", "level", "errortime", "errordata", "causedbyclass", "causedbydata", "exceptionclass", "exceptiondata" ] 
	   fields =>  [ "path", "level", "errortime", "exceptionclass",  "exceptiondata", "causedbyclass", "causedbydata", "errordata" ]
           csv_options => { "col_sep" => "|"}
          "path" => "${ParseFailure}"
	   flush_interval => 0
            }
       } else{
              if "complete" in [tags] {
 		csv{
		  fields =>  [ "path", "level", "errortime", "exceptionclass",  "exceptiondata", "causedbyclass", "causedbydata", "errordata" ]
		  csv_options => { "col_sep" => "|"}
               	  "path" => "${LOGSTASHOUTPUT}"
		  flush_interval => 0
                  }
            } else if "errorexception" in [tags] {
               csv{
#		fields =>  [ "path", "level", "errortime", "exceptionclass", "exceptiondata", "errordata" ]
		fields =>  [ "path", "level", "errortime", "exceptionclass",  "exceptiondata", "causedbyclass", "causedbydata", "errordata" ]
	        csv_options => { "col_sep" => "|"}
               	  "path" => "${LOGSTASHOUTPUT}"
		flush_interval => 0
        	  }
            } else{
            	csv{
#		fields =>  [ "path", "level", "errortime", "errordata" ]
		fields =>  [ "path", "level", "errortime", "exceptionclass",  "exceptiondata", "causedbyclass", "causedbydata", "errordata" ]
		csv_options => { "col_sep" => "|"}
               	  "path" => "${LOGSTASHOUTPUT}"
	 	flush_interval => 0
                 }
            }
        }
}
